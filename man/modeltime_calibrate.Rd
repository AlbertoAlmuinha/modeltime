% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modeltime-calibrate.R
\name{modeltime_calibrate}
\alias{modeltime_calibrate}
\title{Preparation for confidence interval estimation during forecasting}
\usage{
modeltime_calibrate(object, new_data = NULL, quiet = TRUE, ...)
}
\arguments{
\item{object}{A fitted model object that is either:
\enumerate{
\item A workflow that has been fit by \code{\link[=fit.workflow]{fit.workflow()}} or
\item A parsnip model that has been fit using \code{\link[=fit.model_spec]{fit.model_spec()}}
\item A modeltime table that has been created using \code{\link[=modeltime_table]{modeltime_table()}}
}}

\item{new_data}{A test data set \code{tibble} containing future information (timestamps and actual values).}

\item{quiet}{Hide errors (\code{TRUE}, the default), or display them as they occur?}

\item{...}{Additional arguments passed to \code{\link[=modeltime_forecast]{modeltime_forecast()}}.}
}
\value{
A \code{mdl_time_tbl} with test residuals added.
}
\description{
Preparation for confidence interval estimation during forecasting
}
\details{
The pre-forecasting steps include:
\enumerate{
\item Objects are converted to modeltime tables internally
\item Out of sample residuals are calculated from \code{new_data}
}
}
\examples{
library(dplyr)
library(parsnip)
library(rsample)
library(timetk)
library(modeltime)

# Data
m750 <- m4_monthly \%>\% filter(id == "M750")

# Split Data 80/20
splits <- initial_time_split(m750, prop = 0.8)

# Model Spec
model_spec <- arima_reg(
        period                   = 12,
        non_seasonal_ar          = 3,
        non_seasonal_differences = 1,
        non_seasonal_ma          = 3,
        seasonal_ar              = 1,
        seasonal_differences     = 0,
        seasonal_ma              = 1
    ) \%>\%
    set_engine("arima")

# Fit Spec
model_fit <- model_spec \%>\%
    fit(log(value) ~ date, data = training(splits))

# --- Calibration ---

# Converts to Modeltime Table and adds out of sample residuals
model_fit \%>\%
    modeltime_calibrate(new_data = testing(splits))


}
