% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modeltime-forecast.R
\name{modeltime_forecast}
\alias{modeltime_forecast}
\title{Forecast future data}
\usage{
modeltime_forecast(object, new_data = NULL, h = NULL, actual_data = NULL, ...)
}
\arguments{
\item{object}{A fitted model object that is either (1) a workflow that has been fit by \code{\link[=fit.workflow]{fit.workflow()}} or
(2) a parsnip model that has been fit using \code{\link[=fit.model_spec]{fit.model_spec()}}}

\item{new_data}{A \code{tibble} containing future information to forecast.}

\item{h}{The forecast horizon (can be used instead of \code{new_data} for
time series with no exogenous regressors).}

\item{actual_data}{Data that is combined with the output tibble and given an \code{.id = "actual"}}

\item{...}{Additional arguments passed to \code{\link[=future_frame]{future_frame()}} for use with the \code{h} forecast horizon}
}
\value{
A tibble with predictions and time-stamp data.
}
\description{
This is a wrapper for \code{predict()} that is useful for forecasting
future data from a fitted \code{workflow} (trained workflows object) or \code{model_fit} (trained parsnip model).
}
\examples{
library(dplyr)
library(parsnip)
library(rsample)
library(timetk)
library(modeltime)

# Data
m750 <- m4_monthly \%>\% filter(id == "M750")
m750

# Split Data 80/20
splits <- initial_time_split(m750, prop = 0.8)

# Model Spec
model_spec <- arima_reg(
        period                   = 12,
        non_seasonal_ar          = 3,
        non_seasonal_differences = 1,
        non_seasonal_ma          = 3,
        seasonal_ar              = 1,
        seasonal_differences     = 0,
        seasonal_ma              = 1
    ) \%>\%
    set_engine("forecast")

# Fit Spec
model_fit <- model_spec \%>\%
    fit(log(value) ~ date, data = training(splits))

# --- PRODUCE FORECAST ---

# Using new_data
model_fit \%>\%
    modeltime_forecast(new_data = testing(splits))

# Using horizon, h
model_fit \%>\%
    modeltime_forecast(h = "3 years")

# Combining forecast with actual values
model_fit \%>\%
    modeltime_forecast(h = "3 years", actual_data = training(splits))

}
