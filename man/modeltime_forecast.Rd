% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modeltime-forecast.R
\name{modeltime_forecast}
\alias{modeltime_forecast}
\title{Forecast future data}
\usage{
modeltime_forecast(
  object,
  new_data = NULL,
  h = NULL,
  conf_interval = 0.8,
  actual_data = NULL,
  ...
)
}
\arguments{
\item{object}{A fitted model object that is either (1) a workflow that has been fit by \code{\link[=fit.workflow]{fit.workflow()}} or
(2) a parsnip model that has been fit using \code{\link[=fit.model_spec]{fit.model_spec()}}}

\item{new_data}{A \code{tibble} containing future information to forecast.}

\item{h}{The forecast horizon (can be used instead of \code{new_data} for
time series with no exogenous regressors).}

\item{conf_interval}{An estimated confidence interval based on the in-sample residuals}

\item{actual_data}{Data that is combined with the output tibble and given an \code{.id = "actual"}}

\item{...}{Additional arguments passed to \code{\link[=future_frame]{future_frame()}} for use with the \code{h} forecast horizon}
}
\value{
A tibble with predictions and time-stamp data.
}
\description{
This is a wrapper for \code{predict()} that is simplifies forecasting
future data from a fitted \code{workflow} (trained workflow) or \code{model_fit} (trained parsnip model).
}
\details{
The goal of \code{modeltime_forecast()} is to simplify the process of
forecasting future data (controlled by \code{new_data} or \code{h}) and
combining with existing data (controlled by \code{actual_data}).

\strong{Specifying Future Data}

When forecasting without external regressors, meaning that features are dependent on the
date feature alone, you can specify future data using:
\enumerate{
\item \verb{h = "3 years" or "36 months" or 36}:
\item \verb{new_data = tibble with date column extending the trained dates}
}

\strong{Interfaces}

There are 2 interfaces:
\enumerate{
\item Fitted Parsnip Model
\item Fitted Workflow
}

\emph{Interface 1: Fitted Parsnip Model (\code{model_fit} class)}
\itemize{
\item Currently, only the \strong{formula format} is supported (e.g. \code{model_fit <- model_spec \%>\% fit(y ~ date)}).
\item New data and actual data are processed according to the formula (e.g. \code{fit(log(y) ~ date)} will
result in a log transformation applied to future data and new data)
}

\emph{Interface 2: Fitted Workflow (\code{workflow} with \verb{$trained = TRUE})}
\itemize{
\item Currently, only the \strong{recipe format} is supported. However, \code{tidymodels/workflows} Issue #34
will correct issues with indicators, which prevents the \strong{formula format}.
\item Transformations are applied according to the \code{recipe}. New data is forged with \code{hardhat::forge}.
}

\emph{Confidence Interval Estimation}
}
\examples{
library(dplyr)
library(parsnip)
library(rsample)
library(timetk)
library(modeltime)

# Data
m750 <- m4_monthly \%>\% filter(id == "M750")
m750

# Split Data 80/20
splits <- initial_time_split(m750, prop = 0.8)

# Model Spec
model_spec <- arima_reg(
        period                   = 12,
        non_seasonal_ar          = 3,
        non_seasonal_differences = 1,
        non_seasonal_ma          = 3,
        seasonal_ar              = 1,
        seasonal_differences     = 0,
        seasonal_ma              = 1
    ) \%>\%
    set_engine("Arima")

# Fit Spec
model_fit <- model_spec \%>\%
    fit(log(value) ~ date, data = training(splits))

# --- PRODUCE FORECAST ---

# Using new_data
model_fit \%>\%
    modeltime_forecast(new_data = testing(splits))

# Using horizon, h
model_fit \%>\%
    modeltime_forecast(h = "3 years")

# Combining forecast with actual values
model_fit \%>\%
    modeltime_forecast(h = "3 years", actual_data = training(splits))

}
