% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parsnip-arima_reg.R
\name{arima_reg}
\alias{arima_reg}
\title{General Interface for ARIMA Regression Models}
\usage{
arima_reg(
  mode = "regression",
  period = "auto",
  p = 0,
  d = 0,
  q = 0,
  P = 0,
  D = 0,
  Q = 0
)
}
\arguments{
\item{mode}{A single character string for the type of model.
The only possible value for this model is "regression".}

\item{period}{A seasonal frequency. If none is present, use 1.}

\item{p}{The order of the non-seasonal auto-regressive (AR) terms.}

\item{d}{The order of integration for non-seasonal differencing.}

\item{q}{The order of the non-seasonal moving average (MA) terms.}

\item{P}{The order of the seasonal auto-regressive (SAR) terms.}

\item{D}{The order of integration for seasonal differencing.}

\item{Q}{The order of the seasonal moving average (SMA) terms.}
}
\description{
\code{arima_reg()} is a way to generate a \emph{specification} of a model
before fitting and allows the model to be created using
different packages. Currently the only package is \code{forecast}.
}
\details{
The data given to the function are not saved and are only used
to determine the \emph{mode} of the model. For \code{linear_reg()}, the
mode will always be "regression".

The model can be created using the \code{fit()} function using the
following \emph{engines}:
\itemize{
\item \pkg{R}:  \code{"forecast"}  (the default)
}

\strong{Main Arguments}

The main arguments for the model are:
\itemize{
\item \code{period}: A seasonal frequency. If none is present, use 1.
\item \code{p}: The order of the non-seasonal auto-regressive (AR) terms.
\item \code{d}: The order of integration for non-seasonal differencing.
\item \code{q}: The order of the non-seasonal moving average (MA) terms.
\item \code{P}: The order of the seasonal auto-regressive (SAR) terms.
\item \code{D}: The order of integration for seasonal differencing.
\item \code{Q}: The order of the seasonal moving average (SMA) terms.
}

These arguments are converted to their specific names at the
time that the model is fit.

Other options and argument can be
set using \code{set_engine()}. If left to their defaults
here (\code{NULL}), the values are taken from the underlying model
functions.

If parameters need to be modified, \code{update()} can be used
in lieu of recreating the object from scratch.
}
\section{Engine Details}{


The standardized parameter names in parsnip can be mapped to their original
names in each engine:\tabular{ll}{
   modeltime \tab forecast \cr
   period \tab ts(frequency) \cr
   p, d, q \tab order = c(p,d,q) \cr
   P, D, Q \tab seasonal = c(P,D,Q) \cr
   Other options and argument can be set using \code{set_engine()}. \tab  \cr
}


\strong{forecast}\preformatted{## function (y, order = c(0, 0, 0), seasonal = c(0, 0, 0), xreg = NULL, include.mean = TRUE, 
##     include.drift = FALSE, include.constant, lambda = model$lambda, biasadj = FALSE, 
##     method = c("CSS-ML", "ML", "CSS"), model = NULL, x = y, ...)
}
}

\section{Fit Details}{


\strong{xreg (Exogenous Regressors)}

The \code{xreg} paramater is populated using the \code{fit()} or \code{fit_xy()} function.
\itemize{
\item \code{fit(y ~ x)} will pass x on as an exogenous regressor.
\item \code{fit_xy(x, y)} will pass x on as an exogenous regressor.
}

Note that date or date-time class values are excluded from \code{xreg}.

If no \code{xreg} is used, simply use:
\itemize{
\item \code{fit(y ~ 1)} will ignore xreg.
\item \code{fit_xy(x = NULL, y)} will ignore xreg.
}
}

\examples{
# TODO

}
\seealso{
\code{\link[=fit.arima_reg]{fit.arima_reg()}}, \code{\link[=set_engine]{set_engine()}}
}
